import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;

/**
 * Created by yangjian on 2017/11/17.
 */
public class ExcelUtil {


      public void read(String filePath) throws IOException,InvalidFormatException {
            File xlsFile = new File(filePath);
            // 获得工作簿
            Workbook workbook = WorkbookFactory.create(xlsFile);

            // 获得工作表个数
            int sheetCount = workbook.getNumberOfSheets();
            // 遍历工作表
            for (int i = 0; i < sheetCount; i++) {
                  System.out.println("======================================================");
                  System.out.println(workbook.getSheetName(i));
                  System.out.println("======================================================");
                  Sheet sheet = workbook.getSheetAt(i);
                  // 获得行数
                  int rows = sheet.getLastRowNum() + 1;
                  // 获得列数，先获得一行，在得到改行列数
                  Row tmp = sheet.getRow(0);
                  if (tmp == null) {
                        continue;
                  }
                  int cols = tmp.getPhysicalNumberOfCells();
                  // 读取数据
                  for (int row = 0; row < rows; row++) {
                        Row r = sheet.getRow(row);
                        for (int col = 0; col < cols; col++) {
                              if(r.getCell(col)!=null){
                                    Cell cell=r.getCell(col);
                                    String value="";
                                    //判断单元数据类型
                                    switch (cell.getCellType()) {
                                          case HSSFCell.CELL_TYPE_NUMERIC: // 数字
                                                //如果为时间格式的内容
                                                if (HSSFDateUtil.isCellDateFormatted(cell)) {
                                                      //注：format格式 yyyy-MM-dd hh:mm:ss 中小时为12小时制，若要24小时制，则把小h变为H即可，yyyy-MM-dd HH:mm:ss
                                                      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                                                      value=sdf.format(HSSFDateUtil.getJavaDate(cell.
                                                              getNumericCellValue())).toString();
                                                      break;
                                                } else {
//                                                      value = new DecimalFormat("0").format(cell.getNumericCellValue());
                                                      value=String.valueOf(cell.getNumericCellValue());
                                                }
//                                                value=cell.getDateCellValue().toString();
                                                break;
                                          case HSSFCell.CELL_TYPE_STRING: // 字符串
                                                value = cell.getStringCellValue();
                                                break;
                                          case HSSFCell.CELL_TYPE_BOOLEAN: // Boolean
                                                value = cell.getBooleanCellValue() + "";
                                                break;
                                          case HSSFCell.CELL_TYPE_FORMULA: // 公式
                                                value = cell.getCellFormula() + "";
                                                break;
                                          case HSSFCell.CELL_TYPE_BLANK: // 空值
                                                value = "";
                                                break;
                                          case HSSFCell.CELL_TYPE_ERROR: // 故障
                                                value = "非法字符";
                                                break;
                                          default:
                                                value = "未知类型";
                                                break;
                                    }
                                    System.out.print("  "+value);

                              }
                              else  {
                                    System.out.print("      ");
                              }
                        }
                        System.out.println();
                  }
            }
      }

      public void writ(String filePath,String sheetName) throws IOException,InvalidFormatException {
            XSSFWorkbook workbook=new XSSFWorkbook();
            XSSFSheet sheet=workbook.createSheet(sheetName);
            for (int row = 0; row < 10; row++)
            {
                  XSSFRow rows = sheet.createRow(row);
                  for (int col = 0; col < 10; col++)
                  {
                        // 向工作表中添加数据
                        rows.createCell(col).setCellValue("data" + row + col);
                  }
            }
            File xlsFile = new File(filePath);
            FileOutputStream xlsStream = new FileOutputStream(xlsFile);
            workbook.write(xlsStream);
            xlsStream.close();
      }

      public void copy(String filePath,String newfile) throws IOException,InvalidFormatException {
            File xlsFile = new File(filePath);
            File newFile=new File(newfile);
            FileOutputStream outputStream=new FileOutputStream(newFile);
            // 获得工作簿
            Workbook workbook = WorkbookFactory.create(xlsFile);
            workbook.write(outputStream);
            outputStream.close();
      }

      public void read(InputStream is) throws IOException,InvalidFormatException {

            // 获得工作簿
            Workbook workbook = WorkbookFactory.create(is);

            // 获得工作表个数
            int sheetCount = workbook.getNumberOfSheets();
            // 遍历工作表
            for (int i = 0; i < sheetCount; i++) {
                  System.out.println("======================================================");
                  System.out.println(workbook.getSheetName(i));
                  System.out.println("======================================================");
                  Sheet sheet = workbook.getSheetAt(i);
                  // 获得行数
                  int rows = sheet.getLastRowNum() + 1;
                  // 获得列数，先获得一行，在得到改行列数
                  Row tmp = sheet.getRow(0);
                  if (tmp == null) {
                        continue;
                  }
                  int cols = tmp.getPhysicalNumberOfCells();
                  // 读取数据
                  for (int row = 0; row < rows; row++) {
                        Row r = sheet.getRow(row);
                        for (int col = 0; col < cols; col++) {
                              if(r.getCell(col)!=null){
                                    Cell cell=r.getCell(col);
                                    String value="";
                                    //判断单元数据类型
                                    switch (cell.getCellType()) {
                                          case HSSFCell.CELL_TYPE_NUMERIC: // 数字
                                                //如果为时间格式的内容
                                                if (HSSFDateUtil.isCellDateFormatted(cell)) {
                                                      //注：format格式 yyyy-MM-dd hh:mm:ss 中小时为12小时制，若要24小时制，则把小h变为H即可，yyyy-MM-dd HH:mm:ss
                                                      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                                                      value=sdf.format(HSSFDateUtil.getJavaDate(cell.
                                                              getNumericCellValue())).toString();
                                                      break;
                                                } else {
//                                                      value = new DecimalFormat("0").format(cell.getNumericCellValue());
                                                      value=String.valueOf(cell.getNumericCellValue());
                                                }
//                                                value=cell.getDateCellValue().toString();
                                                break;
                                          case HSSFCell.CELL_TYPE_STRING: // 字符串
                                                value = cell.getStringCellValue();
                                                break;
                                          case HSSFCell.CELL_TYPE_BOOLEAN: // Boolean
                                                value = cell.getBooleanCellValue() + "";
                                                break;
                                          case HSSFCell.CELL_TYPE_FORMULA: // 公式
                                                value = cell.getCellFormula() + "";
                                                break;
                                          case HSSFCell.CELL_TYPE_BLANK: // 空值
                                                value = "";
                                                break;
                                          case HSSFCell.CELL_TYPE_ERROR: // 故障
                                                value = "非法字符";
                                                break;
                                          default:
                                                value = "未知类型";
                                                break;
                                    }
                                    System.out.print("  "+value);

                              }
                              else  {
                                    System.out.print("      ");
                              }
                        }
                        System.out.println();
                  }
            }
      }

      public void writTestSample(String filePath,String sheetName) throws IOException,InvalidFormatException {
            XSSFWorkbook workbook=new XSSFWorkbook();
            XSSFSheet sheet=workbook.createSheet(sheetName);

            for (int row = 0; row < 40001; row++)
            {
                  XSSFRow rows = sheet.createRow(row);

                        // 向工作表中添加数据
                        rows.createCell(0).setCellValue("18500"+String.valueOf(900000+row));

                        rows.createCell(1).setCellValue("data" + row );
            }
            File xlsFile = new File(filePath);
            FileOutputStream xlsStream = new FileOutputStream(xlsFile);
            workbook.write(xlsStream);
            xlsStream.close();
      }

      public void check(String filePath,int startRow,int phoneCol) throws IOException,InvalidFormatException {
            long star=System.currentTimeMillis();
            System.out.println();
            int errorNum=0;
            File xlsFile = new File(filePath);
            // 获得工作簿
            Workbook workbook = WorkbookFactory.create(xlsFile);

            // 获得工作表个数
            int sheetCount = workbook.getNumberOfSheets();
            // 遍历工作表
            for (int i = 0; i < sheetCount; i++) {
                  System.out.println("======================================================");
                  System.out.println(workbook.getSheetName(i));
                  System.out.println("======================================================");
                  Sheet sheet = workbook.getSheetAt(i);
                  // 获得行数
                  int rows = sheet.getLastRowNum() + 1;
                  // 获得列数，先获得一行，在得到改行列数
                  Row tmp = sheet.getRow(0);
                  if (tmp == null) {
                        continue;
                  }
                  int cols = tmp.getPhysicalNumberOfCells();
                  // 读取数据
                  for (int row = startRow; row < rows; row++) {
                        Row r = sheet.getRow(row);

                              if(r.getCell(phoneCol)!=null){
                                    Cell cell=r.getCell(phoneCol);
                                    String value="";
                                    //判断单元数据类型
                                    switch (cell.getCellType()) {
                                          case HSSFCell.CELL_TYPE_NUMERIC: // 数字
                                                //如果为时间格式的内容
                                                if (HSSFDateUtil.isCellDateFormatted(cell)) {
                                                      //注：format格式 yyyy-MM-dd hh:mm:ss 中小时为12小时制，若要24小时制，则把小h变为H即可，yyyy-MM-dd HH:mm:ss
                                                      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                                                      value=sdf.format(HSSFDateUtil.getJavaDate(cell.
                                                              getNumericCellValue())).toString();
                                                      break;
                                                } else {
//                                                      value = new DecimalFormat("0").format(cell.getNumericCellValue());
                                                      value=String.valueOf(cell.getNumericCellValue());
                                                }
//                                                value=cell.getDateCellValue().toString();
                                                break;
                                          case HSSFCell.CELL_TYPE_STRING: // 字符串
                                                value = cell.getStringCellValue();
                                                if(value.length()!=11) {
                                                      System.out.println("第" + row + "行电话号码长度不符合:"+value);
                                                      errorNum++;
                                                }

                                                break;
                                          case HSSFCell.CELL_TYPE_BOOLEAN: // Boolean
                                                value = cell.getBooleanCellValue() + "";
                                                System.out.println("第" + row + "行电话号码长度不符合:"+value);
                                                errorNum++;
                                                break;
                                          case HSSFCell.CELL_TYPE_FORMULA: // 公式
                                                value = cell.getCellFormula() + "";
                                                System.out.println("第" + row + "行电话号码长度不符合:"+value);
                                                errorNum++;
                                                break;
                                          case HSSFCell.CELL_TYPE_BLANK: // 空值
                                                value = "";
                                                System.out.println("第" + row + "行电话号码长度不符合:"+value);
                                                errorNum++;
                                                break;
                                          case HSSFCell.CELL_TYPE_ERROR: // 故障
                                                value = "非法字符";
                                                System.out.println("第" + row + "行电话号码长度不符合:"+value);
                                                errorNum++;
                                                break;
                                          default:
                                                value = "未知类型";
                                                System.out.println("第" + row + "行电话号码长度不符合:"+value);
                                                errorNum++;
                                                break;
                                    }


                              }
                              else  {
                                    System.out.print("      ");
                              }
                        }
                        System.out.println();

                  }

            System.out.println("共"+errorNum+"行数据错误");
            long end=System.currentTimeMillis();
             double time=end-star;
             time=time/1000;
            System.out.println("时间;"+time+"s");
            }

      }


